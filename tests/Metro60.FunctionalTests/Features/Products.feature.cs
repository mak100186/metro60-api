// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Metro60.FunctionalTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Service should serve Products")]
    public partial class ServiceShouldServeProductsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Products.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Service should serve Products", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting all products should return 30 products")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void GettingAllProductsShouldReturn30Products()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting all products should return 30 products", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("I request all products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("the result should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.And("I should get 30 products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get a single product should return expected product")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void GetASingleProductShouldReturnExpectedProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a single product should return expected product", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When("I request a product with id: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("the result should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail"});
                table1.AddRow(new string[] {
                            "iPhone 9",
                            "An apple mobile which is nothing like apple",
                            "549",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg"});
#line 15
 testRunner.And("I should get the product with the following:", ((string)(null)), table1, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should be able to add a new product")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void IShouldBeAbleToAddANewProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should be able to add a new product", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table2.AddRow(new string[] {
                            "31",
                            "iPhone 4",
                            "An apple mobile",
                            "549",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 22
    testRunner.When("I add the following product:", ((string)(null)), table2, "When ");
#line hidden
#line 25
    testRunner.Then("the result should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.When("I request a product with id: 31", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then("the result should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail"});
                table3.AddRow(new string[] {
                            "iPhone 4",
                            "An apple mobile",
                            "549",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg"});
#line 28
 testRunner.And("I should get the product with the following:", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should be able to update an existing product")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void IShouldBeAbleToUpdateAnExistingProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should be able to update an existing product", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table4.AddRow(new string[] {
                            "31",
                            "iPhone X",
                            "An apple mobile",
                            "300",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 35
    testRunner.When("I update the following product:", ((string)(null)), table4, "When ");
#line hidden
#line 38
    testRunner.Then("the result should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.When("I request a product with id: 31", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("the result should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail"});
                table5.AddRow(new string[] {
                            "iPhone X",
                            "An apple mobile",
                            "300",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg"});
#line 41
 testRunner.And("I should get the product with the following:", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should not be able to add a new product with existing Title and Brand")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void IShouldNotBeAbleToAddANewProductWithExistingTitleAndBrand()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to add a new product with existing Title and Brand", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table6.AddRow(new string[] {
                            "32",
                            "iPhone 4",
                            "An apple mobile",
                            "549",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 48
    testRunner.When("I add the following product:", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table7.AddRow(new string[] {
                            "ArgumentException",
                            "Product with Brand=Apple and Title=iPhone 4 already exists."});
#line 51
    testRunner.Then("the result should be 400 with the following errors:", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should not be able to add a new product with existing Id")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void IShouldNotBeAbleToAddANewProductWithExistingId()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to add a new product with existing Id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table8.AddRow(new string[] {
                            "31",
                            "iPhone 8",
                            "An apple mobile",
                            "549",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 58
    testRunner.When("I add the following product:", ((string)(null)), table8, "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table9.AddRow(new string[] {
                            "ArgumentException",
                            "An item with the same key has already been added. Key: 31"});
#line 61
    testRunner.Then("the result should be 400 with the following errors:", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should not be able to add a new product without title")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void IShouldNotBeAbleToAddANewProductWithoutTitle()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to add a new product without title", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table10.AddRow(new string[] {
                            "33",
                            "",
                            "An apple mobile",
                            "549",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 68
    testRunner.When("I add the following product:", ((string)(null)), table10, "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table11.AddRow(new string[] {
                            "Title",
                            "The Title field is required."});
#line 71
    testRunner.Then("the result should be 400 with the following errors:", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should not be able to add a new product with a description of more than 100 cha" +
            "racters")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void IShouldNotBeAbleToAddANewProductWithADescriptionOfMoreThan100Characters()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to add a new product with a description of more than 100 cha" +
                    "racters", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 77
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table12.AddRow(new string[] {
                            "33",
                            "iPhone 8",
                            "An apple mobile.An apple mobile.An apple mobile.An apple mobile.An apple mobile.A" +
                                "n apple mobile. An apple mobile.",
                            "549",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 78
    testRunner.When("I add the following product:", ((string)(null)), table12, "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table13.AddRow(new string[] {
                            "Description",
                            "The field Description must be a string with a maximum length of 100."});
#line 81
    testRunner.Then("the result should be 400 with the following errors:", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should not be able to add a new product with a price of 0")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void IShouldNotBeAbleToAddANewProductWithAPriceOf0()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to add a new product with a price of 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table14.AddRow(new string[] {
                            "33",
                            "iPhone 8",
                            "An apple mobile",
                            "0",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 88
    testRunner.When("I add the following product:", ((string)(null)), table14, "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table15.AddRow(new string[] {
                            "Price",
                            "Price should be greater than 0"});
#line 91
    testRunner.Then("the result should be 400 with the following errors:", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should not be able to add a new product with a price of less than 0")]
        [NUnit.Framework.CategoryAttribute("products")]
        public virtual void IShouldNotBeAbleToAddANewProductWithAPriceOfLessThan0()
        {
            string[] tagsOfScenario = new string[] {
                    "products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to add a new product with a price of less than 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table16.AddRow(new string[] {
                            "33",
                            "iPhone 8",
                            "An apple mobile",
                            "-10",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 98
    testRunner.When("I add the following product:", ((string)(null)), table16, "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table17.AddRow(new string[] {
                            "Price",
                            "Price should be greater than 0"});
#line 101
    testRunner.Then("the result should be 400 with the following errors:", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should not be able to add a product without authentication")]
        [NUnit.Framework.CategoryAttribute("products")]
        [NUnit.Framework.CategoryAttribute("authentication")]
        public virtual void IShouldNotBeAbleToAddAProductWithoutAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "products",
                    "authentication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to add a product without authentication", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 107
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table18.AddRow(new string[] {
                            "33",
                            "iPhone 8",
                            "An apple mobile",
                            "-10",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 108
    testRunner.When("I add the following product without authentication:", ((string)(null)), table18, "When ");
#line hidden
#line 111
    testRunner.Then("the result should be 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should not be able to update a product without authentication")]
        [NUnit.Framework.CategoryAttribute("products")]
        [NUnit.Framework.CategoryAttribute("authentication")]
        public virtual void IShouldNotBeAbleToUpdateAProductWithoutAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "products",
                    "authentication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to update a product without authentication", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 115
    testRunner.Given("I have products in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Title",
                            "Description",
                            "Price",
                            "DiscountPercentage",
                            "Rating",
                            "Stock",
                            "Brand",
                            "Category",
                            "Thumbnail",
                            "Images"});
                table19.AddRow(new string[] {
                            "33",
                            "iPhone 8",
                            "An apple mobile",
                            "-10",
                            "12.96",
                            "4.69",
                            "94",
                            "Apple",
                            "smartphones",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
                            "https://dummyjson.com/image/i/products/1/thumbnail.jpg,https://dummyjson.com/imag" +
                                "e/i/products/1/thumbnail.jpg"});
#line 116
    testRunner.When("I update the following product without authentication:", ((string)(null)), table19, "When ");
#line hidden
#line 119
    testRunner.Then("the result should be 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
